# Pass to compile-expr a record with additional information
# useful for constructing the syntax of ocaml:
#
#         e: the expression to compile
#         b: a flag denoting whether you're in a sub-expression
#         p: whether previous expr was an s-fun
#         n: whether next expr is an s-fun
#         m: mutable variables in scope
#
# I define wrapper types in ocaml that cover ints, floats, strings, bools,
# and lists. I then redefine certain builtin operators, allowing me to give
# the ocaml code similar behavior to pyret code. This allows me to work
# with types in a way consistent with expectations in pyret: overloaded
# binary operators like '+', if test-blocks requiring boolean values, etc.
#
# Currently, the below works only for pyret code WITHOUT ANNOTATIONS. In certain cases,
# like case expressions, they're unavoidable. In function and data declarations, however,
# this compiler assumes no annotations.
#
# SUPPORTED S-EXPRS:
#
#     s-id   s-num   s-var   s-frac   s-bool   s-str   s-op   s-fun   s-lam
#     s-check-test   s-check   s-app   s-if-else   s-let   s-let-expr   s-letrec
#     s-block   s-user-block   s-when   s-cases   s-cases-else   s-type   s-data
#     s-tuple   s-tuple-get   s-paren
#
# VARIANTS:
#
#     1) 'when' statements don't return anything; they're treated as unit 
#        statements when compiled into ocaml.
#
#     2) data expressions are turned into ocaml records allowing indexation
#        via field names.
#
# TODO:
#
#     1) I've yet to add support for certain keywords, which might affect
#        the cases below: 'list', 'shadow', etc. Right now the code doesn't
#        support shadowed identifiers.
#
#     2) Additionally, I have some support for assert statements ('is', 'is-not')
#        but not yet for other CheckOps.
#    
#     3) Handle annotations:
#         
#        - Right now, although I handle type and data expressions, it's a little bit
#          inconsequential without annotations. For example, if I have something like this:
#
#            type NewList = List
#
#          then you can write: "cases(NewList) nl: |link(hd, tl) => ..." just as you would a list.
#          Since I don't handle annotations, however, I'm not really dealing with this renaming of 
#          List.
#
#     4) Ensure 'empty' keyword comes last in ocaml match stmt
#     5) Yet to add support for '~=' operator
#     6) Unclear whether bucklescript can compile Core.Std / whether I can use Bignum

import parse-pyret as P
import ast as A
import string-dict as S
import my-gdrive("pyret-to-ocaml-tests") as T

# update type t definition
var ta = "" 
# add additional type definitions
var da = ""
# add additional functions
var fa = ""
# dictionary of added types
var data-types = [S.string-dict:]

# reset mutable variables
fun reset-vars():
  block:
    data-types := [S.string-dict:]
    fa := ""
    ta := ""
    da := ""
  end
end

fun p2a(py-prog :: String):
  P.surface-parse(py-prog, "")
  # second argument is program name for srclocs
end

# package expression with additional information
fun create-rec(e, b, p, n, m):
  {exp: e, stmt: b, prev: p, next: n, mut: m}
end

# reset flags when you're not in a function
fun negate-rec(e, m):
  create-rec(e, false, false, false, m)
end

# similar to other "A.is-s ..." functions; is expr a type definition
fun is-s-type(s): 
  cases(A.Expr) s:
    | s-type(_, _, _, _) => true
    | else => false
  end
end

# is expr a data definition
fun is-s-data(s): 
  cases(A.Expr) s:
    | s-data(_, _, _, _, _, _, _ ) => true
    | else => false
  end
end

# get type from type expression
fun get-type(ann):
  cases(A.Ann) ann:
    | a-name(_, id) => 
      if id.s == "List":
        "t list"
      else:
        id.s
      end
    | a-app(_, a, _) => get-type(a)
  end
end

# convert list of strings to one large string
fun list-to-string(l):
  cases(List) l:
    | link(hd, tl) => hd + list-to-string(tl)
    | empty => ""
  end
end

# create a function in the form "name a b .. = {a = t; b = t; ... } ;;"
fun update-fa(t-name, name ,mems):
  field-list = (map(lam(v): v.bind.id.s end, mems))
  param-list = list-to-string(map(lam(v): v + " " end, field-list))
  body-list = list-to-string(map(lam(v): v + " = " + v + "; " end, field-list))
  upper-t-name = string-to-upper(t-name)
  upper-name = string-to-upper(name)
  block:
    fa := fa + "let " + name + " " + param-list + "= "
    fa := fa + upper-t-name + " (" + upper-name + " ("
    fa := fa + "{" + body-list + "})) ;; \n"
    data-types := data-types.set(name, {[list: upper-t-name, upper-name]; field-list})
  end
end

# filter data and type expressions from stmts; return two lists
fun filter-two(f, g, l, acc):
  cases(List) l:
    | empty => acc
    | link(hd, tl) => 
      if f(hd):
        filter-two(f, g, tl, {acc.{0}.append([list: hd]); acc.{1}})
      else if g(hd):
        filter-two(f, g, tl, {link(hd, acc.{0}); acc.{1}})
      else:
        filter-two(f, g, tl, {acc.{0}; acc.{1}.append([list: hd])})
      end
  end
end

# parse binary operations
fun op-helper(o):
  if (o == "op-") or (o == "op*") or (o == "op/"):
    "t_left " + '"' + o + '"'
  else if (o == "op==") or (o == "op=~"): 
    "t_left " + '"' + o + '"'
  else:
    "t_left " + '"' + o + '"'
  end
end

# parse s-ops in assert statements; add future cases here
fun s-op-helper(o):
  cases(A.CheckOp) o:
    | s-op-is(_) => "="
    | s-op-is-not(_) => "<>"
    | else => raise("s-op not yet supported")
  end
end

# keep track of mutable variables
fun collect-mutables(s):
  cases(List) s:
    | link(hd, tl) => 
      if A.is-s-var(hd):
        link(hd.name.id, collect-mutables(tl))
      else:
        collect-mutables(tl)
      end
    | empty => empty
  end
end

# same as map(), but with f taking additional arguments
fun map-with-args(f, l, b, p, m):
  cases(List) l:
    | link(hd1, tl1) => 
      cases(List) tl1:
        | link(hd2, tl2) => 
          link(f(hd1, b, p, A.is-s-fun(hd2), m), 
            map-with-args(f, tl1, b, A.is-s-fun(hd1), m))
        | empty => link(f(hd1, b, p, false, m), empty)
      end
    | empty => empty
  end
end

# compile fun's args
fun compile-arg-list(fmls):
  cases(List) fmls:
    | link(_, _) => map(lam(i): i.id.s end, fmls)
    | empty => [list: "()"]
  end
end

# interpose '::' when cases(List)
fun compile-cases-list-args(id, args):
  cases(List) args:
    | link(hd, tl) => 
      cases(List) tl:
        | link(_, _) =>
          [list:
            "(L ("
            , hd.bind.id
            , "::"
            , "["
            , compile-cases-list-args(id, tl)
            , "]"
            , "))"
          ]
        | empty => link(hd.bind.id, empty)
      end  
    | empty => empty
  end
end

# compile non-list datatypes in cases' args
fun compile-cases-args(args):
  cases(List) args:
    | link(_, _) => map(lam(i): i.bind.id end, args)
  end
end

# compile case branches
fun compile-cases(cs, m):
  cases (A.CasesBranch) cs:
    | s-cases-branch(_, _, id, args, body) =>
      [list:
        "|" 
        , 
        if id == "link": 
          compile-cases-list-args(id, args) 
        else if data-types.has-key(id):
          [list:
            map(lam(v): [list: v ] end, data-types.get-value(id).{0})           
            , "{"
            , map2(lam(x, y): x + " = " + y.bind.id.s + "; " end, data-types.get-value(id).{1}, args)
            , "}"
          ]
        else:
          compile-cases-args(args) 
        end
        ,'->'
        , compile-expr(negate-rec(body, m))
      ]
    | s-singleton-cases-branch(_, _, id, body) =>
      [list:
        "|"
        , id
        , '->'
        , compile-expr(negate-rec(body, m))
      ]
  end
end

# compile top-level statement
fun compile-stmt(e, b, p, n, m):
  compile-expr(create-rec(e, b, p, n, m))
end

# iterate over list of expressons
fun compile-stmts(es, b, p, m):
  map-with-args(compile-stmt, es, b, p, m)
end

fun compile-expr(r):
  # if you're compiling a stmt, end with ";;"
  delim = if r.stmt: ";;" else: "" end
  cases (A.Expr) r.exp:
    | s-id(_, id) => 
      if (r.mut).member(id):
        [list:
          "!"
          , id
          , delim
        ]
      else:
        [list: id, delim]
      end
    | s-num(_, n) =>
      if num-is-integer(n): 
        [list: 
          "("
          , "N"
          , "("
          , "I"
          , num-to-string(n)
          , ")"
          , ")"
          , delim]
      else:
        # split string to add in decimals
        frac = string-split(num-to-string(n), "/")
        num = string-append(frac.get(0), ".")
        den = string-append(frac.get(1), ".")
        [list: 
          "("
          , "N"
          , "("
          , "F"
          , "(" + num + " /. " + den + ")"
          , ")"
          , ")"
          , delim]
      end
    | s-var(_, id, val) => 
      ending = if delim == "": "in" else: delim end
      [list:
        "let"
        , id.id
        , "="
        , "ref"
        , compile-expr(negate-rec(val, r.mut))
        , ending
      ]
    | s-frac(_, num, den) =>
      num-str = string-append(num-to-string(num), ".") 
      den-str = string-append(num-to-string(den), ".")
      # Have to do strcat here to avoid spaces maybe introduced later
      [list: 
        "("
        , "N"
        , "("
        , "F"
        , "(" + num-str + "/." + den-str + ")"
        , ")"
        , ")"
        , delim]
    | s-bool(_, b) => [list: if b: "(B true)" else: "(B false)" end, delim]
    | s-str(_, s) =>
      # Have to use quote marks since print will strip them out
      [list:
        "("
        , "S"
        , '"' + s + '"'
        , ")"
        , delim]
    | s-op(_, _, op, le, re) =>
      [list:
        "("
        , op-helper(op) 
        , compile-expr(negate-rec(le, r.mut))
        , compile-expr(negate-rec(re, r.mut))
        , ")"
        , delim
      ]
    | s-fun(_, name, _, args, _, _, body, chk, _) => 
      body-terms = body.stmts      
      # determine header
      header = 
        if r.prev:
          "and"
        else:
          "let rec"
        end
      # determine delimiter
      ending = 
        if r.next: 
          "" 
        else if not(r.stmt):
          "in"
        else:
          delim 
        end
      # parens around link
      paren-tuple = 
        if name == "link":
          {"("; ")"}
        else:
          {""; ""}
        end
      fun-args = compile-arg-list(args)
      fun-body = compile-stmts(body-terms, false, false, r.mut + collect-mutables(body-terms)) 
      check-body = 
        if chk == none: 
          empty
        else:
          compile-expr(negate-rec(chk.value, r.mut)) + [list: ";;"]
        end
      [list:
        header
        , paren-tuple.{0}
        , name
        , fun-args
        , "="
        , fun-body
        , paren-tuple.{1}
        , ending
        , check-body
      ]
    | s-lam(_, _, _, args, _, _, body, _, _) =>
      body-terms = body.stmts
      [list:
        "(fun" 
        , compile-arg-list(args)
        , "->"
        , compile-stmts(body-terms, false, false, r.mut + collect-mutables(body-terms))
        , ")"
        , delim
      ]
    | s-check-test(_, op, _, left, right) =>
      [list: 
        "assert"
        , "("
        , compile-expr(negate-rec(left, r.mut))
        , s-op-helper(op)
        , compile-expr(negate-rec(right.value, r.mut))
        , ")"
      ]
    | s-check(_, _, body, _) => compile-expr(negate-rec(body, r.mut)) + [list: delim]
    | s-app(_, fe, aes) =>
      args = 
        if aes == empty: 
          "()" 
        else: 
          compile-stmts(aes, false, false, r.mut + collect-mutables(aes))
        end
      [list:
        "("
        , compile-expr(negate-rec(fe, r.mut))
        , args
        , ")"
        , delim
      ] 
    | s-if-else(_, brs, els, _) => 
      [list:
        map(lam(br):
            [list: 
              "if "
              , "to_bool "
              , compile-expr(negate-rec(br.test, r.mut))
              , "then"
              , compile-stmts(br.body.stmts, false, false, r.mut + collect-mutables(br.body.stmts))
              , "else"]
          end, 
          brs)
        , compile-stmts(els.stmts, false, false, r.mut + collect-mutables(els.stmts))
        , delim
      ]
    | s-let(_, name, value, _) =>
      ending = if delim == "": "in" else: delim end
      [list: 
        "let"
        , name.id
        , "="
        , compile-expr(negate-rec(value, r.mut))
        , ending
      ]
    | s-let-expr(_, binds, body, _) =>
      [list:
        map(lam(bnd):
            [list:
              "let"
              , bnd.b.id.s
              , "="
              , compile-expr(negate-rec(bnd.value, r.mut))
              , "in"]
          end,
          binds)
        , compile-stmts(body.stmts, false, false, r.mut + collect-mutables(body.stmts))
        , delim
      ]
    | s-letrec(_, binds, body, _) =>
      # use 'and' to declare all but first expr
      first-expr = binds.get(0)
      rest-expr = binds.drop(1)
      var in-delim = true
      [list:
        "let rec"
        , first-expr.b.id.s
        , "=" 
        , compile-expr(negate-rec(first-expr.value, r.mut))
        , map(lam(bnd):
            block:
              in-delim := false
              [list:
                "and"
                , bnd.b.id.s
                , "="
                , compile-expr(negate-rec(bnd.value, r.mut))
                , "in"        
              ]
            end
          end,
          rest-expr)
        , if in-delim: "in" else: "" end
        , compile-stmts(body.stmts, false, false, r.mut + collect-mutables(body.stmts))
        , delim
      ]
    | s-block(_, stmts) =>
      # end all but last expr with ";"
      last-pos = stmts.length() - 1
      last-expr = stmts.get(last-pos)
      rest-expr = stmts.take(last-pos)
      [list:
        map(lam(v): 
            if A.is-s-let(v):
              [list: compile-expr(negate-rec(v, r.mut))]
            else:
              [list:
                "ignore("
                , compile-expr(negate-rec(v, r.mut))
                , ")"
                , ";"
              ]
            end
          end,
          rest-expr) 
        , compile-expr(negate-rec(last-expr, r.mut))
        , delim
      ]
    | s-user-block(_, blk) =>
      compile-expr(negate-rec(blk, r.mut)) + [list: delim]
    | s-assign(_, id, val) => 
      [list:
        id
        , ":="
        , compile-expr(negate-rec(val, r.mut))
        , ";"
        , delim
      ]
    | s-when(_, tst, blk, _) => 
      # assuming contents of when block always return nothing:
      # https://github.com/brownplt/pyret-lang/issues/852
      [list:
        "if" 
        , "to_bool "
        , compile-expr(negate-rec(tst, r.mut))
        , "then"
        , "ignore("
        , compile-stmts(blk.stmts, false, false, r.mut + collect-mutables(blk.stmts))
        , ")"
        , "else"
        , "()"
        , delim
      ]
    | s-cases(_, _, val, brs,_) => 
      [list:
        "("
        , "match"
        , compile-expr(negate-rec(val, r.mut))
        , "with"
        , map(lam(br):
            [list:
              compile-cases(br, r.mut)
            ]
          end,
          brs)
        , ")"
        , delim
      ]
    | s-cases-else(_, _, val, brs, els, _) => 
      [list:
        "("
        , "match"
        , compile-expr(negate-rec(val, r.mut))
        , "with"
        , map(lam(br):
            [list:
              compile-cases(br, r.mut)
            ]
          end,
          brs)
        , "| _ ->"
        , compile-expr(negate-rec(els, r.mut))
        , ")"
        , delim
      ]
    | s-type(_, name, _, ann) => 
      t-name = string-to-lower(name.s)
      t-type = string-to-lower(get-type(ann))
      block:
        ta := ta + " | " + string-to-upper(t-name) +  " of " + t-name
        da := da + "and " + t-name + " = " + t-type + "\n"     
      end
    # params will eventually hold type parameters
    | s-data(_, name, params, _, vars, _, _) => 
      t-name = string-to-lower(name)
      block:
        ta := ta + " | " + string-to-upper(t-name) +  " of " + t-name
        # traverse data cases; return two lists of names of branches
        fun data-vars(l, acc):
          cases(List) l:
            | link(hd, tl) => 
              cases(A.Variant) hd:
                | s-variant(_, _, n, mems, _) => 
                  block:
                    d-name = string-to-lower(n)
                    d-mems = map(lam(v): v.bind.id.s + " : t; " end, mems)
                    da := da + "and " + d-name + " = { " + list-to-string(d-mems) + "}" + "\n"
                    update-fa(t-name, d-name, mems)
                    data-vars(tl, {link(d-name, acc.{0}); acc.{1}})
                  end
                | s-singleton-variant(_, n, _) => 
                  d-name = string-to-lower(n)
                  data-vars(tl, {acc.{0}; link(d-name, acc.{1})})
              end
            | empty => acc
          end
        end
        dvs = data-vars(vars, {empty; empty})
        fa := fa + "\n"
        da := da + "and " + t-name + " = "
        # construct non-singleton types
        map(lam(v): 
            block:
              da := da + "| " + string-to-upper(v) + " of " + string-to-lower(v) + " "         
            end
          end
          , dvs.{0})
        # for formatting
        if dvs.{0}.length() > 0:
          da := da + "\n"
        else:
          da
        end
        # construct singleton types
        map(lam(v): 
          block:
              da := da + "| " + string-to-upper(v) + " "           
          end
        end
        , dvs.{1})
      end
    | s-tuple(_, fields) => 
      last-index = fields.length() - 1
      last = fields.get(last-index)
      rest = fields.take(last-index)
      fun add-paren(t):
        if t == 0: "" else: "))" + add-paren(t - 1) end
      end
      [list:
        map(lam(v):
            [list: 
              "(T ("
              , compile-expr(negate-rec(v, r.mut))
              , ", "
          ] end,
          rest)
        , compile-expr(negate-rec(last, r.mut))
        , add-paren(last-index)
      ] + [list: delim]
    | s-tuple-get(_, tup, index, _) =>
      [list:
        "get_tuple "
        , compile-expr(negate-rec(tup, r.mut))
        , index
      ] + [list: delim]      
    | s-paren(_, expr) =>
      compile-expr(negate-rec(expr, r.mut)) + [list: delim]
  end
end

fun show(p):
  fun h(shadow p):
    if is-List(p):
      map(h, p)
    else:
      print(p)
    end
  end
  block:
    h(p)
    ""
  end
end

# define functions to use with unitype
fun prelude():
```       
exception TypeError
exception Unsupported

(* basic types: after compiling types and data *)
type number = I of int | F of float 

and t = N of number | S of string | B of bool | L of t list | T of t * t

``` 
+ ta + "\n" + da + ";; \n\n" + fa +
  
```
(* helpful list functions *)
let link a b = (L [a; b]) ;;
let empty = (L []) ;;

let rec concat_lists a b =
  match a with
  | L(hd :: [tl]) -> L(hd :: [(concat_lists tl b)])
  | empty -> b
;;

let to_bool t : bool = 
  match t with 
  | B(b) -> b 
  | _ -> raise TypeError 
;;

let rec get_tuple t i =
  match t with
  | T(a, b) -> if i = 0 then a else get_tuple b (i - 1)
  | c -> c
;;

(* string to int -> int -> int function *)
let s_to_op s =
  match s with
  | "op-" -> ( - )
  | "op*" -> ( * )
  | "op/" -> ( / )
  | _ -> raise Unsupported
;;

(* string to float -> float -> float function *)
let s_to_fop s =
  match s with
  | "op-." -> ( -. )
  | "op*." -> ( *. )
  | "op/." -> ( /. )
  | _ -> raise Unsupported
;;

(* string to 'a -> 'a -> bool function *)
let s_to_bop s =
  match s with
  | "op>" -> ( > )
  | "op>=" -> ( >= )
  | "op<" -> ( < )
  | "op<=" -> ( <= )
  | "op==" -> ( = )
  | "op<=>" -> ( == )
  | _ -> raise Unsupported
;;

(* string operations *)
let string_op op a b = 
  match op with
  | "op+" -> S(a ^ b)
  | "op>" | "op>=" | "op<" | "op<=" as op' -> B((s_to_bop op') a b)
  | "op==" | "op<=>" as op' -> B((s_to_bop op') a b)
  | "op=~" -> raise Unsupported
  | _ -> raise TypeError
;;

(* int operations *)
let int_op op a b = 
  match op with
  | "op+" -> N(I(a + b))
  | "op>" | "op>=" | "op<" | "op<=" | "op==" | "op<=>" as op' -> B((s_to_bop op') a b)
  | "op-" | "op*" | "op/" as op' -> N(I((s_to_op op') a b))
  | "op=~" -> raise Unsupported
  | _ -> raise TypeError
;;

(* float operations *)
let float_op op a b = 
  match op with
  | "op+" -> N(F(a +. b)) (* contagion *)
  | "op>" | "op>=" | "op<" | "op<=" | "op==" | "op<=>" as op' -> B((s_to_bop op') a b)
  | "op-" | "op*" | "op/" as op' -> N(F((s_to_fop (op' ^ ".")) a b)) 
  | "op=~" -> raise Unsupported
  | _ -> raise TypeError
;;

(* list operations *)
let list_op op a b = 
  match op with
  | "op+" -> concat_lists a b
  | "op>" | "op>=" | "op<" | "op<=" | "op==" | "op<=>" as op' -> B((s_to_bop op') a b)
  | "op=~" -> raise Unsupported
  | _ -> raise TypeError
;;    

(* bool operations *)
let bool_op op a b = 
  match op with
  | "op==" | "op<=>" as op' -> B((s_to_bop op') a b)
  | "op=~" -> raise Unsupported
  | _ -> raise TypeError
;;

(* branch based on right type *)
let t_int_right op a r = 
  match r with
  | N(I(b)) -> int_op op a b
  | N(F(b)) -> float_op op (float_of_int a) b
  | _ -> raise TypeError
;;

let t_float_right op a r = 
  match r with
  | N(I(b)) -> float_op op a (float_of_int b)
  | N(F(b)) -> float_op op a b
  | _ -> raise TypeError
;;

let t_str_right op a r = 
  match r with
  | S(b) -> string_op op a b
  | _ -> raise TypeError
;;

let t_bool_right op a r =
  match r with
  | B(b) -> bool_op op a b
  | _ -> raise TypeError 
;;

let t_list_right op a r = 
  match r with
  | L(b) -> list_op op a r 
  | _ -> raise TypeError
;;

(* redefine operators for t type - branch based on left type *)
let t_left op l r : t =
  match l with
  | N(I(a)) -> t_int_right op a r
  | N(F(a)) -> t_float_right op a r
  | S(a) -> t_str_right op a r
  | B(a) -> t_bool_right op a r
  | L(a) -> t_list_right op l r
  | _ -> raise TypeError
;;
```
end

fun compile(p):
  stmts = p2a(p).block.stmts
  dt-stmts = filter-two(lam(v): is-s-data(v) end, lam(v): is-s-type(v) end, stmts, {empty; empty})
  block:
    reset-vars()
    # compile data and type stmts updating globals
    compile-stmts(dt-stmts.{0}, true, false, empty)
    [list: 
      prelude()
      # compile rest of stmts
      , compile-stmts(dt-stmts.{1}, true, false, collect-mutables(stmts))
    ]
  end
end

fun go(p):
  show(compile(p))
end
