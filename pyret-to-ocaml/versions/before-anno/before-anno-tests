provide *

b0 = ```
      2 + 2
      ``` # should be 4

b1 = ```
     2 + "hi"
     ``` # should be error

b2 = ```
     "anno" + "tate"
     ``` # should be "annotate"

b3 = ```
     link(1, empty) + link(2, empty)
     ``` # should be [1; 2] 

b4 = ```
     check:
       l = link(1, empty) + link(2, empty) + link(3, empty)
       l is link(1, link(2, link(3, empty)))
     end
     ``` # should be [1; 2; 3] 

b5 = ```
     1 + 2 + 3.14
     ``` # should be 6.14

b6 = ```
     1 + 2 + "hi" + 4
     ``` # should be error

b7 = ```
     fun f(x, y): 
       x - y
     end
     
     f(2, link(1, empty))
     ``` # should be error 

k0 = ```
    29
     ``` # should be 29

k1 = ```
     29.17
     ``` # should be 29.17

k2 = ```
     2/4
     ``` # should be 0.5

k3 = ```
     12 == 10
     ``` # should be false

k4 = ```
     fun f(x, y): x + y end
     ``` # should be val f : t -> t -> t = <fun>

k5 = ```
     fun f(x, y): x * y end
     ``` # should be val f : t -> t -> t = <fun>

k6 = ```
     fun f(x):
       g(x + x)
     end
     fun g(y):
       h(y * y)
     end
     fun h(k):
       k + (k * k)
     end
     f(10)
     ``` # should be 160400

k7 = ```
     fun f(x):
       fun g(a):
         fun j(c):
           c
         end
         j(a + 2)
       end
       fun h(b):
         g(b)
       end
       h(x)
     end
     fun i(y):
       f(y)
     end
     check:
       i(10) is 12
     end
     ``` # should be 12

k8 = ```
     fun f(x):
       fun g(y): 
         (y * y) 
       end
       g(x)
     end
     f(10)
     ``` # should be 100

k9 = ```
     lam(x): lam(y): y + 2 end(x) end(4)
     ``` # should be 6

k10 = ```
      fun f(x):
        if x == 0: 
          0 
        else: 
          x + f(x - 1) 
        end
      end
      f(5)
      ``` # should be 15

k11 = ```
      fun f(x):
        if g(x) == 0: 
          0 
        else: 
          g(x) 
        end
      end
      fun g(x):
        if x < 5: 
          0 
        else: 
          x 
        end
      end
      f(5) 
      ``` # should be 5

k12 = ```
      fun f(x, y): 
        x + y 
      end
      f(1, 2)
      ``` # should be 3
      
k13 = ```
      link(1, link(2, empty))
      ``` # should be [1; 2]

k14 = ```
      lam(v): v + 2 end
      
      ``` # should be t -> t = <fun>

k15 = ```
      letrec x = 3: x end
      ``` # should be 3

k16 = ```
      block: 1 end
      ``` # should be 1

k17 = ```
      fun f(x):
        y = 3
        z = 4
        x + y + z
      end
      f(4)
      ``` # should be 11

k18 = ```
      a = 4
      fun f(x):
        y = 3
        z = 4
        x + y + z + a
      end
      f(4)
      ``` # should be 15

k19 = ```
      a = 4
      fun f(x):
        y = 3
        z = 4
        x + y + z + a
      end
      y + f(4)
      ``` # should be unbound value error

k20 = ```
      1 + 2 + 3
      ``` # should be 6

k21 = ```
      var x = 42
      x
      ``` # should be 42

k22 = ```
      var x = 42
      x := 173
      x
      ``` # should be 173

k23 = ```
      var x = 42       
      fun f(y):
        var k = 5
        y + k + x 
      end      
      f(10)
      ``` # should be 57

k24 = ```
      var x = 42       
      fun f(y):
        var k = 5
        y + k + x 
      end      
      f(10) + k
      ``` # should be unbound value error

k25 = ```
      var x = 5
      if true: 
        var y = 6
        x + y
      else:
        x
      end
      ``` # should be 11

k26 = ```
      var x = 5
      if true: 
        var y = 6
        x + y
      else:
        y + 5
      end
      ``` # should be unbound value error

k27 = ```
      x = true
      when x == true:
        y = 4
        y + 38
      end
      ``` # should be unit; will differ from pyret

k28 = ```
      x = true
      when x == true:
        y = 4
        y + 38
      end
      173
      ``` # should be 173

k29 = ```
      fun f(x): 
        cases(List) x:
          | link(hd, _) => hd
          | empty => 0
        end
      end
      f(link(1, link(2, empty)))
      ``` # should be 1

k30 = ```
      fun f(x): 
        cases(List) x:
          | link(hd, _) => hd
          | else => 0
        end
      end
      f(empty)
      ``` # should be 0

k31 = ```
      fun f(x):
        cases(List) x:
          | link(hd, tl) => 
            cases(List) tl:
              | link(_, tl1) => link(hd, f(tl1))
              | empty => link(hd, empty)
            end
          | empty => empty
        end
      end
      f(link(1, link(2, link(3, link(4, link(5, empty))))))
      ``` # should be [1; 3; 5]

k32 = ```
      fun map(f, l):
        cases(List) l:
          | link(hd, tl) => link(f(hd), map(f, tl))
          | empty => empty
        end
      end
      
      fun add_2(l):
        map(lam(v): v + 2 end, l)
      end
      
      check:
        add_2(link(1, link(2, empty))) is link(3, link(4, empty))
      end
      ``` # should be [3; 4]

k33 = ```
       fun length(l):
         cases(List) l:
           | link(_, tl) => 1 + length(tl)
           | empty => 0
         end
       end
     
       length(link(1, link(2, link(3, link(4, link(5, empty))))))
       ``` # should produce 5

k34 = ```
       fun skip(l):
         cases(List) l:
           | link(_, tl) => tl + link("there", empty)
           | empty => empty
         end
       end
     
       skip(link("bye", link("hi", empty)))
       ``` # should concat lists

k35 = ```
      fun f():
        4 + 47
      where:
        f() is 51
      end 
      ``` # should produce an assert that passes

k36 = ```
      fun f():
        4 + 47
      where:
        f() is-not 51
      end 
      ``` # should produce an assert that doesn't pass

k37 = ```
      fun f():
        4 + 47
      end
      check:
        f() is 51
        f() + 122 is 173
      end 
      ``` # should produce an assert that passes

k38 = ```
      fun my_filter(l, p):
        cases(List) l:
          | link(hd, tl) => 
            if p(hd): 
              link(hd, my_filter(tl, p))
            else: 
              my_filter(tl, p)
            end
          | empty => empty
        end
      end
      
      fun my_fold(f, l, i):
        cases(List) l:        
          | link(hd, tl) => f(hd, my_fold(f, tl, i)) 
          | empty => i
        end
      end
      
      fun sum_small(l):
        fun f(x): x < 5 end
        fun sum(a, b): a + b end
        odd_list = my_filter(l, f)
        my_fold(sum, odd_list, 0)
      end
      
      check:
        y = sum_small(link(1, link(14, link(5, link(4, link(3, link(9, empty)))))))
        let x = y: x is 8 end
      end
      ``` # should produce an assert that passes

k39 = ```
      type Store = List<StoreCell>
      
      type Newnum = Number
      ``` # should produce a new datatype

k40 = ```      
      data StoreCell:
        | store_cell(loc, value)
      end
      ``` # should produce a new datatype

k41 = ```      
      data StoreCell:
        | store_cell(loc, value)
      end
      
      type Store = List<StoreCell>
      
      type Newnum = Number
      ``` # should produce a new datatype

k42 = ```
      data Value:
        | v_num(value)
        | v_str(value)
        | v_bool(value) 
      end

      data Expr:
        | e_num(value)
        | e_str(value)
        | e_bool(value)
        | e_op(op, left, right)
        | e_if(cond, consq, altern)

        | sugar_and(left, right)
        | sugar_or(left, right)
      end

      data Operator:
        | op_plus
        | op_append
        | op_num_eq
        | op_str_eq
      end
      ``` # should produce a new datatype (2014)

k43 = ```      
      type Newnum = Number
      type Newernum = Newnum
      
      # compiler won't handle annotation
      fun f(x) -> Newernum:
        x 
      end
      
      f(73) + 100      
      ``` # should produce 173

k44 = ```      
      data StoreCell:
        | store_cell(loc, value)
      end 
      
      type Newnum = Number
      
      type Store = List<StoreCell>
      
      fun f(sto):
        cases(Store) sto:
          | link(hd, tl) => 1
        end
      end
      
      check:
        f(link(store_cell("hi", 4), empty)) is 1
      end
      ``` # should produce an assert that passes

k45 = ```      
      data StoreCell:
        | store_cell(loc, value)
      end 
      
      type Newnum = Number
      
      type Store = List<StoreCell>
      
      fun f(sto):
        cases(Store) sto:
          | link(hd, tl) => 
            cases(StoreCell) hd:
              | store_cell(l, v) => l
            end
        end
      end
      check:
        f(link(store_cell("hi", 4), empty)) is "hi"
      end
      ``` # should produce an assert that passes

k46 = ```
      {0; 1}
      ``` # should produce tuple {0; 1}

k47 = ```
      check:
        {0; 1; "hi"}.{2} is "hi"
      end
      ``` # should produce "hi"
      
p0 = ```
     fun f():
     3
     end
     f()
     ``` # should be 3

p1 = ```
     fun f(x): 
     x * x
     end
     f(3)
     ``` # should be 9

p2 = ```
     fun f(x):
     g(x + x)
     end
     fun g(y):
     y * y
     end
     f(10)
     ``` # should be 400

p3 = ```
     if false: 1 else if false: 2 else: 3 end
     ``` # should be 3

p4 = ```
     if true: 1 else if false: 2 else: 3 end
     ``` # should be 1

p5 = ```
     if false: 1 else if true: 2 else: 3 end
     ``` # should be 2

p6 = ```
     fun sum(n):
     if n == 0: 1
     else: n + sum(n - 1)
     end
     end
     sum(100000)
     ``` # should be 5000050001

p7 = ```
     fun fib(n):
     if n == 0: 1
     else if n == 1: 1
     else: fib(n - 1) + fib(n - 2)
     end
     end
     fib(30)
     ``` # should be 1346269

p8 = ```
     fun rng(a, b):
     if a >= b: empty
     else: link(a, rng(a + 1, b))
     end
     end
     fun make_list(c, i):
     if c > i: empty else: link(c, make_list(c + 1, i)) end
     end
     check:
     rng(0, 10) is make_list(0, 9)
     end
     ``` # should be [list: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

p9 = ```
     let x = 3: x + 4 end
     ``` # should be 7

p10 = ```
      let x = 3, y = 4: x + y + 7 end
      ``` # should be 14

p11 = ```
      letrec x = 3, y = 4: x + y end
      ``` # should be 7

p12 = ```
      letrec odd = lam(n): if n == 0: false else: even(n - 1) end end,
             even = lam(n): if n == 0: true else: odd(n - 1) end end:
        odd(5)
      end
      ``` # should be true

p13 = ```
      letrec odd = lam(n): if n == 0: false else: even(n - 1) end end,
             even = lam(n): if n == 0: true else: odd(n - 1) end end:
        odd(6)
      end      
      ``` # should be false

p14 = ```
      block:
      1
      2
      3
      end
      ``` # should be 3

p15 = ```
      fun f(x):
      y = 3
      x + y
      end
      f(4)
      ``` # should be 7

p16 = ```
      fun f(x):
      y = 3
      z = 4
      x + y + z
      end
      f(5)
      ``` # should be 12

p17 = ```
      when true: 1 end
      ``` # should produce nothing

p18 = ```
      when false: 1 end
      ``` # should produce nothing

p19 = ```
      fun f(): x = 3 var y = 4 x + y end
      f()
      ``` # should produce 7

p20 = ```
      fun f():
      var x = 3
      x := 4
      x := 5
      x
      end
      f()
      ``` # should produce 5

p21 = ```
      (1)
      ``` # should produce 1

p22 = ```
      (lam(x): x + 3 end)(4)
      ``` # should produce 7

p23 = ```
      (lam(x) block: 
      var y = x 
      y := y + y 
      y 
      end)(5)
      ``` # should produce 10

p24 = ```
      1/2 - 2/4
      ``` # should produce 0

p25 = ```
      "hello"
      ``` # should produce "hello"

p26 = ```
      "hello" + " " + "world"
      ``` # should produce "hello world"
